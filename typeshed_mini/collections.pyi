from typing import Iterable

class Counter[T]:
    @update(Counter[T])
    def __setitem__[T](self: Counter[T], key: T, value: int) -> None: ...
    def __getitem__[T](self: Counter[T], key: T) -> int: ...

class deque[T]:
    @update(deque[T], *1)
    def __init__(self, iterable: list[T] = None) -> None: ...
    @update(deque[T | Q], 1)
    def append[Q](self: deque[T], x: Q) -> None: ...
    @update(deque[T | Q], 1)
    def append[Q](self: deque[T], x: Q) -> None: ...
    @update(deque[T])
    def pop(self: deque[T]) -> T: ...
    @update(deque[T])
    def popleft(self: deque[T]) -> T: ...
    @update(deque)
    def clear(self) -> None: ...
    @update(deque[T | Q], 1)
    def extend[Q](self: deque[T], iterable: Iterable[Q]) -> None: ...
    @update(deque[T | Q], 1)
    def extendleft[Q](self: deque[T], iterable: Iterable[Q]) -> None: ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterable[T]: ...
