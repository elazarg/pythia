from typing import Literal, Iterator

class ndarray:
    @property
    def size(self: ndarray) -> int: ...
    @property
    def ndim(self: ndarray) -> int: ...
    @property
    @new
    def T(self: ndarray) -> ndarray: ...
    def __bool__(self: ndarray) -> bool: ...
    @new
    def __add__(self: ndarray, other: ndarray) -> ndarray: ...
    @new
    def __sub__(self: ndarray, other: ndarray) -> ndarray: ...
    @new
    def __mul__(self: ndarray, other: ndarray) -> ndarray: ...
    @new
    def __truediv__(self: ndarray, other: ndarray) -> ndarray: ...
    @new
    def __truediv__(self: ndarray, other: float) -> ndarray: ...
    @new
    def __radd__(self: ndarray, other: float) -> ndarray: ...
    @new
    def __rsub__(self: ndarray, other: float) -> ndarray: ...
    @new
    def __rmul__(self: ndarray, other: float) -> ndarray: ...
    @new
    def __rtruediv__(self: ndarray, other: float) -> ndarray: ...
    @new
    def __gt__(self: ndarray, other) -> ndarray: ...
    @new
    def __lt__(self: ndarray, other) -> ndarray: ...
    @new
    def __ge__(self: ndarray, other) -> ndarray: ...
    @new
    def __le__(self: ndarray, other) -> ndarray: ...
    @new
    def __eq__(self: ndarray, other) -> ndarray: ...
    @new
    def __ne__(self: ndarray, other) -> ndarray: ...
    @new
    def __pow__(self: ndarray, other: ndarray | float | int) -> ndarray: ...
    @new
    def __matmul__(self: ndarray, other: ndarray) -> ndarray: ...
    @new
    def __getitem__(self: ndarray, key: slice) -> ndarray: ...
    @new
    def __getitem__[*Args](self: ndarray, key: tuple[*Args]) -> ndarray: ...
    @new
    def __getitem__(self: ndarray, key: ndarray) -> ndarray: ...
    @new
    def __getitem__(self: ndarray, key: list[int]) -> ndarray: ...
    @new
    def __getitem__(self: ndarray, key: int | float) -> ndarray: ...
    @update(ndarray)
    def __setitem__(self: ndarray, key: int, value: float) -> None: ...
    @update(ndarray)
    def __setitem__(self: ndarray, key: int, value: int) -> None: ...
    @update(ndarray)
    def __setitem__[*Args](self: ndarray, key, value) -> None: ...
    #
    # @new
    # def __iter__(self: ndarray) -> Iterator[float]: ...

    @new
    def astype(self: ndarray, dtype: Literal["int"]) -> list[int]: ...
    @new
    def mean(self: ndarray) -> ndarray: ...
    def std(self: ndarray) -> float: ...
    @property
    @new
    def shape(self: ndarray) -> list[int]: ...
    def any(self: ndarray) -> bool: ...
    def all(self: ndarray) -> bool: ...
    @new
    def reshape(self: ndarray, shape: tuple) -> ndarray: ...
    @new
    def reshape(self: ndarray, shape: int) -> ndarray: ...
    @new
    def reshape(self: ndarray, d1: int, d2: int) -> ndarray: ...
    @new
    def mean(self: ndarray, axis: int) -> ndarray: ...
    def sum(self: ndarray) -> float: ...
    @new
    def sum(self: ndarray, axis: int) -> ndarray: ...
    def argmin(self: ndarray) -> int: ...
    def min(self: ndarray) -> int: ...
    def max(self: ndarray) -> int: ...
    def argmax(self: ndarray) -> int: ...
    @new
    def transpose(self: ndarray) -> ndarray: ...
    @new
    def flatten(self: ndarray) -> ndarray: ...
    @new
    def ravel(self: ndarray) -> ndarray: ...
    @new
    def clip(self: ndarray, a_min: float, a_max: float) -> ndarray: ...
    @update(ndarray)
    def fill(self: ndarray, value: float | int) -> None: ...

# class c_:
#     def __getitem__[*Args](self: c_, key: slice | tuple[*Args]) -> ndarray: ...
@property
@new
def c_() -> ndarray: ...
@new
def setdiff1d(a: ndarray, b: ndarray) -> ndarray: ...
@new
def unique(arg: ndarray) -> ndarray: ...
@new
def append(arr: ndarray, value: float) -> ndarray: ...

# def append(arr: ndarray, values: ndarray) -> ndarray: ...

@new
def zeros(dims: tuple | int) -> ndarray: ...
@new
def zeros(dims: tuple | int, type) -> ndarray: ...
@new
def ones(dims: tuple | int) -> ndarray: ...
@new
def ones(dims: tuple | int, type) -> ndarray: ...
@new
def mean(a: ndarray, axis: int) -> ndarray: ...
@new
def dot(a: ndarray, y: ndarray) -> ndarray: ...
def sum(a: ndarray) -> float: ...
def argmin(a: ndarray) -> int: ...
def argmax(a: ndarray) -> int: ...
@new
def concatenate(arrays: tuple | ndarray) -> ndarray: ...
@module
class random:
    @staticmethod
    def seed(seed: int) -> None: ...
    @staticmethod
    @new
    def choice(a: ndarray | int, size: int) -> ndarray: ...
    @staticmethod
    @new
    def rand(*args: int) -> ndarray: ...
    @staticmethod
    @new
    def randn(*args: int) -> ndarray: ...
    @staticmethod
    @new
    def randint(low: int, high: int = None, size: int | tuple = None) -> ndarray: ...
    @staticmethod
    @new
    def random(size: int | tuple = None) -> ndarray: ...
    @staticmethod
    @new
    def normal(
        loc: float = 0.0, scale: float = 1.0, size: int | tuple = None
    ) -> ndarray: ...
    @staticmethod
    @new
    def uniform(
        low: float = 0.0, high: float = 1.0, size: int | tuple = None
    ) -> ndarray: ...
    @staticmethod
    @new
    def permutation(x: int | ndarray) -> ndarray: ...
    @staticmethod
    @new
    def shuffle(x: ndarray) -> None: ...

@module
class linalg:
    @staticmethod
    @new
    def norm(a: ndarray, ord: None, axis: int) -> ndarray: ...
    @staticmethod
    @new
    def inv(a: ndarray) -> ndarray: ...
    @staticmethod
    @new
    def pinv(a: ndarray) -> ndarray: ...
    @staticmethod
    @new
    def det(a: ndarray) -> float: ...
    @staticmethod
    @new
    def eig(a: ndarray) -> tuple[ndarray, ndarray]: ...
    @staticmethod
    @new
    def eigvals(a: ndarray) -> ndarray: ...
    @staticmethod
    @new
    def svd(a: ndarray) -> tuple[ndarray, ndarray, ndarray]: ...
    @staticmethod
    @new
    def solve(a: ndarray, b: ndarray) -> ndarray: ...

@new
def array(object) -> ndarray: ...
@new
def array(object, dtype) -> ndarray: ...
@new
def arange(
    start: int | float, stop: int | float = None, step: int | float = 1
) -> ndarray: ...
@new
def linspace(start: float, stop: float, num: int = 50) -> ndarray: ...
@new
def eye(N: int, M: int = None, k: int = 0) -> ndarray: ...
@new
def identity(n: int) -> ndarray: ...
@new
def transpose(a: ndarray) -> ndarray: ...
@new
def vstack(tup: tuple | list) -> ndarray: ...
@new
def hstack(tup: tuple | list) -> ndarray: ...
@new
def column_stack(tup: tuple | list) -> ndarray: ...
@new
def where(condition: ndarray) -> ndarray: ...
@new
def where(condition: ndarray, x: ndarray, y: ndarray) -> ndarray: ...
@new
def where(condition: ndarray, x: int, y: ndarray) -> ndarray: ...
def allclose(a: ndarray, b: ndarray) -> bool: ...
def allclose(a: ndarray, b: ndarray, rtol: float, atol: float) -> bool: ...
def full(shape: tuple | int, fill_value: float, type) -> ndarray: ...
def full(shape: tuple | int, fill_value: int, type) -> ndarray: ...
def std(a: ndarray, axis: int) -> ndarray: ...
