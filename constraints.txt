//collection of declarations of constraints
//based on actual interpreter at ceval.c:
//https://github.com/python/cpython/blob/bd45440231c50783554e97901731b93814a952a4/Python/ceval.c#L1357-L3455
//mapping to operations can be found here:
//https://github.com/python/cpython/blob/16f526e7cb0b5d81de47f513ad112cda61574331/Objects/typeobject.c#L6463-L664


constraint: hasattr(obj, name)
constraint: can_apply(obj, name, params)
semantics: res <- getattr(obj, name)(params)


def getattr(obj, name):
	return obj.__dict__[name]
	or bound type(obj).__dict__[name]
	or type(obj).__dict__[name]
	or bound x.__dict__[name] for x in mro(type(obj))

constraint hasattr(obj, name):
	lookup(obj, name) succeeds
	
constraint hash(obj):
	if __hash__ and __eq__ undefined:
		returns id() or somthing similar s.t. x == y -> (x is y and hash(x) == hash(y))
	if only __eq__ defined:
		hash return None; unhashable
		using hash will raise TypeError
		to retain super().__hash__, it should be done explicitly
	if __hash__ defined:
		it should not raise TypeError, since isinstance(obj, collections.Hashable)
		should return integer (will be truncated to Py_ssize_t, usually word size)
	
	all sorts of constraints: https://docs.python.org/3/reference/datamodel.html#object.__hash__
	
constraint bool(obj):
	if defined, __bool__ must return False or True
	if defined, __len__() != 0
	if both undefined, always True



NOP

LOAD_FAST : GETLOCAL(oparg)

LOAD_CONST 
STORE_FAST 
POP_TOP 
ROT_TWO
ROT_THREE
DUP_TOP
DUP_TOP_TWO

UNARY_POSITIVE: PyNumber_Positive(TOP)
UNARY_NEGATIVE: PyNumber_Negative(TOP)
UNARY_NOT:		PyObject_IsTrue(TOP)
UNARY_INVERT:	PyNumber_Invert(TOP)

BINARY_POWER:			PyNumber_Power(SECOND, TOP, None)
BINARY_MULTIPLY:		PyNumber_Multiply(SECOND, TOP)
BINARY_MATRIX_MULTIPLY: PyNumber_MatrixMultiply(SECOND, TOP)
BINARY_TRUE_DIVIDE: 	PyNumber_TrueDivide(SECOND, TOP)
BINARY_FLOOR_DIVIDE: 	PyNumber_FloorDivide(SECOND, TOP)
BINARY_MODULO: 			(PyUnicode_Format|PyNumber_Remainder)(SECOND, TOP)
BINARY_ADD: 			PyNumber_Add(SECOND, TOP)
BINARY_SUBTRACT: 		PyNumber_Subtract(SECOND, TOP)

BINARY_SUBSCR: PyObject_GetItem(SECOND, TOP)

BINARY_LSHIFT: 	PyNumber_Lshift(SECOND, TOP)
BINARY_RSHIFT: 	PyNumber_Rshift(SECOND, TOP)
BINARY_AND: 	PyNumber_And(SECOND, TOP)
BINARY_XOR: 	PyNumber_Xor(SECOND, TOP)
BINARY_OR:		PyNumber_Or(SECOND, TOP)

LIST_APPEND: PyList_Append(AT(oparg), TOP)
SET_ADD: PySet_Add(AT(oparg), TOP)

INPLACE_POWER: 				PyNumber_InPlacePower(SECOND, TOP, None)
INPLACE_MULTIPLY: 			PyNumber_InPlaceMultiply(SECOND, TOP)
INPLACE_MATRIX_MULTIPLY:	PyNumber_InPlaceMatrixMultiply(SECOND, TOP)
INPLACE_TRUE_DIVIDE:		PyNumber_InPlaceTrueDivide(SECOND, TOP)
INPLACE_FLOOR_DIVIDE:		PyNumber_InPlaceFloorDivide(SECOND, TOP)
INPLACE_MODULO:				PyNumber_InPlaceRemainder(SECOND, TOP)
INPLACE_ADD:				PyNumber_InPlaceAdd(SECOND, TOP)
INPLACE_SUBTRACT:			PyNumber_InPlaceSubtract(SECOND, TOP)
INPLACE_LSHIFT:				PyNumber_InPlaceLshift(SECOND, TOP)
INPLACE_RSHIFT:				PyNumber_InPlaceRshift(SECOND, TOP)
INPLACE_AND:				PyNumber_InPlaceAnd(SECOND, TOP)
INPLACE_XOR:				PyNumber_InPlaceXor(SECOND, TOP)
INPLACE_OR:					PyNumber_InPlaceOr(SECOND, TOP)

STORE_SUBSCR:	PyObject_SetItem(SECOND, TOP, THIRD)
DELETE_SUBSCR:	PyObject_DelItem(SECOND, TOP)

PRINT_EXPR: ?

RAISE_VARARGS: do_raise(exc?, cause?)

RETURN_VALUE

GET_AITER: ?
GET_ANEXT: ?
GET_AWAITABLE: ?

YIELD_FROM: ?

YIELD_VALUE: ?

POP_EXCEPT: Assume correct
POP_BLOCK: Assume correct
END_FINALLY: Assume correct

LOAD_BUILD_CLASS: Assume correct

STORE_NAME:  PyObject_SetItem(locals(), GETITEM(names, oparg), TOP)
DELETE_NAME: PyObject_DelItem(locals(), GETITEM(names, oparg))

UNPACK_SEQUENCE: unpack_iterable(seq, oparg, stack_pointer + oparg)
UNPACK_EX: 		 unpack_iterable(seq, oparg, stack_pointer + totalargs)

STORE_ATTR:  PyObject_SetAttr(TOP, GETITEM(names, oparg), SECOND)
DELETE_ATTR: PyObject_DelAttr(TOP, GETITEM(names, oparg))

STORE_GLOBAL:  PyObjec_SetItem(globals(), GETITEM(names, oparg), TOP)
DELETE_GLOBAL: PyObject_DelItem(globals(), GETITEM(names, oparg)) raise PyExc_NameError

LOAD_NAME:   PyObject_GetItem(locals()|globals()builtins(), GETITEM(names, oparg)) raise PyExc_NameError
LOAD_GLOBAL: PyObject_GetItem(globals(), builtins(), GETITEM(names, oparg)) raise PyExc_NameError

DELETE_FAST: ? Assume correct raise PyExc_UnboundLocalError
DELETE_DEREF: ? Assume correct raise PyExc_UnboundLocalError
LOAD_CLOSURE: ?
LOAD_CLASSDEREF: ?

LOAD_DEREF: ?
STORE_DEREF: ?

BUILD_TUPLE: Correct ?
BUILD_LIST: Correct ?
BUILD_SET: PySet_Add(set, vars[oparg...])  # HASHABLE
BUILD_MAP: PyDict_SetItem(map=oparg, key=PEEK(2*i), value=PEEK(2*i - 1)) # HASHABLE KEYS

MAP_ADD: PyDict_SetItem(TOP-oparg, TOP, SECOND)

LOAD_ATTR: PyObject_GetAttr(TOP, GETITEM(names, oparg))

COMPARE_OP: cmp_outcome(oparg, SECOND, TOP)

IMPORT_NAME: ?
IMPORT_STAR: ?
IMPORT_FROM: ?

JUMP_FORWARD: Correct
POP_JUMP_IF_FALSE: Correct
POP_JUMP_IF_TRUE: Correct

JUMP_IF_FALSE_OR_POP: Correct
JUMP_IF_TRUE_OR_POP: Correct
JUMP_ABSOLUTE: Correct

GET_ITER: PyObject_GetIter(TOP)
GET_YIELD_FROM_ITER: PyObject_GetIter(TOP)

FOR_ITER: before: [iter]; after: [iter, iter()] *or* []; swallows StopIteration

BREAK_LOOP: Correct
CONTINUE_LOOP: Correct

SETUP_FINALLY
BEFORE_ASYNC_WITH 
SETUP_ASYNC_WITH

SETUP_WITH: PyObject_CallFunctionObjArgs(enter)

WITH_CLEANUP_START: ?
WITH_CLEANUP_FINISH: ?

CALL_FUNCTION: call_function(&sp, oparg)

CALL_FUNCTION_VAR_KW: Lotta stuff, but basically KW is keywords, and probably Correct

MAKE_FUNCTION: Correct?

BUILD_SLICE: PySlice_New(start=SECOND, stop=TOP)
BUILD_SLICE: PySlice_New(start=THIRD, stop=SECOND, step=TOP)

FORMAT_VALUE: PyObject_Format(value, fmt_spec) but perhaps complicated

EXTENDED_ARG: Correct?
